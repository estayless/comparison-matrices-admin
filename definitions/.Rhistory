n<-10
#secuencial version
seqMat<-function(n){
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
#settings for sequential
matSeq<-matrix(data=NA, nrow = n, ncol = n)
seqMat(n)
matSeq
#aplicacion de una funcion en base a par de coordenadas
sumCoord<-function(i, j){
i+j
#return(NULL)
}
sumCoordCA<-function(id){
combis[id,1]+combis[id,2]
#print(paste0(combis[id,1],"-",combis[id,2]))
#return(NULL)
}
#generacion de pares de matrices triangular cuadrada en base a un n
n<-10
#secuencial version
seqMat<-function(n){
matSeq<-matrix(data=NA, nrow = n, ncol = n)
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
return(matSeq)
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
seqMat(n)
#aplicacion de una funcion en base a par de coordenadas
sumCoord<-function(i, j){
i+j
#return(NULL)
}
sumCoordCA<-function(id){
combis[id,1]+combis[id,2]
#print(paste0(combis[id,1],"-",combis[id,2]))
#return(NULL)
}
#generacion de pares de matrices triangular cuadrada en base a un n
n<-1000
#secuencial version
seqMat<-function(n){
matSeq<-matrix(data=NA, nrow = n, ncol = n)
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
return(matSeq)
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
#settings for sequential
#benchmark
library(microbenchmark)
microbenchmark(
seqMat(n),
clusterApply(caCl, chunks, sumCoordCA),
feMat(n),
times = 1
)
gc()
install.packages("mongolite")
install.packages("mongolite")
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%s",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
gc()
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(#db = db,
#collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=Admin",
user,
password,
ip,
port)
#connect to the collection.
collConn <- mongo(#db = db,
#collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrix2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%db",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%db",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%s",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%s",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
conDict <- collectionConnection(user, password, ip, port, db, collection)
conDict$find()
df<-as.data.frame(x,y)
x<-"app hola"
y<-"app mundo"
df<-as.data.frame(x,y)
df
df<-as.data.frame(cbind(x,y))
df
conDict$insert(df)
#settings para Usuario
userU <-"appUsuario"
passwordU <- "usuario"
ipU <- "127.0.0.1"
portU <- "27017"
dbU <- "comparisonMatrices"
collectionU <- "test"
conDict <- collectionConnection(userU, passwordU, ipU, portU, dbU, collectionU)
#settings para Usuario
userU <-"appUsuario"
passwordU <- "usuario"
ipU <- "127.0.0.1"
portU <- "27017"
dbU <- "comparisonMatrices"
collectionU <- "test"
conU <- collectionConnection(userU, passwordU, ipU, portU, dbU, collectionU)
conU$find()
conU$insert(df)
mongolite::mongo()
mongo
gc()
mongo()
mongolite::mongo()
install.packages("taxize")
setwd("~/Desktop/comparisonMatricesApp/admin/definitions")
install.packages("rstudioapi")
library(rstudioapi)
library(mongolite)
library(tidyverse)
library(taxize)
setwd(dirname(getActiveDocumentContext()$path))
wd()
getwd()
source("./connection/collectionConnection.R")
source("../connection/collectionConnection.R")
source("definitionsPopulation")
source("/definitionsPopulation")
source("definitionsPopulation.R")
password <- readline(prompt="Enter password: ")
.rs.askForPassword("foo")
password <- .rs.askForPassword("foo")
gc()
library("rstudioapi")
library("mongolite")
library("tidyverse")
library("taxize")
setwd(dirname(getActiveDocumentContext()$path))
source("../connection/collectionConnection.R")
source("definitionsPopulation.R")
password <- .rs.askForPassword("Enter password:")
gc()
source('~/Desktop/comparisonMatricesApp/admin/definitions/mainDefinitions.R')
gc()
