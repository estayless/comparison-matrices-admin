library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = rbind) %dopar% {
foreach(j = i:n, .combine = rbind) %do%{
sumCoord(i,j)
}
}
}
x<-feMat(10)
x
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
x<-feMat(10)
x
n<-10
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
clusterApply(caCl, chunks, sumCoordCA)
unlist(clusterApply(caCl, chunks, sumCoordCA))
View(combis)
length(unlist(clusterApply(caCl, chunks, sumCoordCA)))
length(x)
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
length(unlist(clusterApply(caCl, chunks, sumCoordCA)))
unlist(clusterApply(caCl, chunks, sumCoordCA))
x
unlist(clusterApply(caCl, chunks, sumCoordCA)) == x
#aplicacion de una funcion en base a par de coordenadas
sumCoord<-function(i, j){
i+j
#return(NULL)
}
sumCoordCA<-function(id){
combis[id,1]+combis[id,2]
#print(paste0(combis[id,1],"-",combis[id,2]))
#return(NULL)
}
#generacion de pares de matrices triangular cuadrada en base a un n
n<-10
#secuencial version
seqMat<-function(n){
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
#settings for sequential
matSeq<-matrix(data=NA, nrow = n, ncol = n)
seqMat(n)
matSeq
#aplicacion de una funcion en base a par de coordenadas
sumCoord<-function(i, j){
i+j
#return(NULL)
}
sumCoordCA<-function(id){
combis[id,1]+combis[id,2]
#print(paste0(combis[id,1],"-",combis[id,2]))
#return(NULL)
}
#generacion de pares de matrices triangular cuadrada en base a un n
n<-10
#secuencial version
seqMat<-function(n){
matSeq<-matrix(data=NA, nrow = n, ncol = n)
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
return(matSeq)
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
seqMat(n)
#aplicacion de una funcion en base a par de coordenadas
sumCoord<-function(i, j){
i+j
#return(NULL)
}
sumCoordCA<-function(id){
combis[id,1]+combis[id,2]
#print(paste0(combis[id,1],"-",combis[id,2]))
#return(NULL)
}
#generacion de pares de matrices triangular cuadrada en base a un n
n<-1000
#secuencial version
seqMat<-function(n){
matSeq<-matrix(data=NA, nrow = n, ncol = n)
for (i in 1:n) {
for (j in i:n) {
matSeq[i,j]<-sumCoord(i,j)
}
}
return(matSeq)
}
#clusterApply version
library(parallel)
library(arrangements)
combis<-combinations(n,2,replace = TRUE)
caCl<-makeCluster(4)
clusterExport(caCl, c("sumCoordCA","combis"))
chunks<-splitIndices(nrow(combis),4)
# clusterApply(caCl, chunks, sumCoordCA)
# stopCluster(caCl)
#foreach version
#library(foreach)
library(doParallel)
clFE<-makeCluster(4)
registerDoParallel(clFE)
clusterEvalQ(clFE, library(foreach))
clusterExport(clFE, "sumCoord")
feMat<-function(n){
foreach(i = 1:n, .combine = c) %dopar% {
foreach(j = i:n, .combine = c) %do%{
sumCoord(i,j)
}
}
}
#settings for sequential
#benchmark
library(microbenchmark)
microbenchmark(
seqMat(n),
clusterApply(caCl, chunks, sumCoordCA),
feMat(n),
times = 1
)
gc()
shiny::runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
definitionsPopulation(input$user, input$password, input$key, input$fileGz[4])
runApp('Desktop/comparisonMatricesApp/admin')
help(tryCatch)
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp()
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
# print(input$user)
# print(input$password)
# print(input$key)
# print(input$fileGz[4])
out<-tryCatch({definitionsPopulation(input$user, input$password, input$key, as.character(input$fileGz[4]))},
error = function(err) {
print(err)},
finally = invalidateLater(1))
runApp('Desktop/comparisonMatricesApp/admin')
print(out)
runApp('Desktop/comparisonMatricesApp/admin')
exeDefPop
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp()
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
out<-tryCatch({definitionsPopulation(input$user, input$password, input$key, as.character(input$fileGz[4]))},
error = function(err) {
print(err)
#errorCatch$val<-as.character(err)
},
finally = invalidateLater(1))
runApp('Desktop/comparisonMatricesApp/admin')
out<-tryCatch({definitionsPopulation(input$user, input$password, as.character(input$fileGz[4]))},
error = function(err) {
print(err)
#errorCatch$val<-as.character(err)
},
finally = invalidateLater(1))
executeDefinitionsPopulation <- observeEvent(input$exeDefPop,{
errorCatch<-reactiveValues()
errorCatch$val<-""
validate(
need(try(errorCatch$val != "<simpleError: Authentication failed.>"), "Authentication failed")
)
req(input$user, input$password, input$fileGz)
out<-tryCatch({definitionsPopulation(input$user, input$password, as.character(input$fileGz[4]))},
error = function(err) {
print(err)
#errorCatch$val<-as.character(err)
},
finally = invalidateLater(1))
#print(out)
})
tabItem(tabName = "geneDefinitions",
fluidRow(
column(width = 12,
box(
title=span(icon("cogs"), "Gene definitions population"), width = NULL, status = "primary", solidHeader = TRUE,
textInput(inputId = "user", label = "User name", value = "", width = NULL, placeholder = NULL),
passwordInput(inputId = "password", label = "Password", value = "", width = NULL, placeholder = NULL),
fileInput(inputId = "fileGz", "Choose the .gz file from the NCBI",
multiple = FALSE,
accept = ".gz"),
actionButton(inputId = "exeDefPop", label = "Populate definitions database", class = "btn-block primary")
),
)
)
# password <- .rs.askForPassword("Enter password:")
# key <- .rs.askForPassword("Enter Entrez api key:")
# definitionsPopulation(password, key)
)
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
executeDefinitionsPopulation <- observeEvent(input$exeDefPop,{
errorCatch<-reactiveValues()
req(input$user, input$password, input$fileGz)
out<-tryCatch({definitionsPopulation(input$user, input$password, as.character(input$fileGz[4]))},
error = function(err) {
#print(err)
errorCatch$val<-as.character(err)
},
finally = invalidateLater(1))
#print(out)
print(errorCatch$val)
})
runApp()
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
val <- observe({
errorCatch$val
validate(need(errorCatch$val != "Error: Authentication failed.\n", "Error: Authentication failed."))
#errorCatch$val
})
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
gc()
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
stop(safeError("Authentication failed." ))
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%s",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
con <- collectionConnection(user, password, ip, port, db, collection)
con$update({"chao":"mundo"})
chao<-"mundo"
con$update(chao)
con$update(as.data.frame(chao))
con$update(as_tibble(chao))
chao<-cbind("mundo")
con$update(chao)
con$drop()
help("modalDialog")
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
taxons<-lapply(taxIds,ncbi_get_taxon_summary)
runApp('Desktop/comparisonMatricesApp/admin')
print(taxons)
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
View(rank_ref)
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
gc()
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
matrix(data = NA, ncol=10, nrow = 20)
mat<-matrix(data = NA, ncol=10, nrow = 20)
tibleMat<-as_tibble(mat)
tibleMat
tibleMat<-tibleMat %>% select(-last_col())
tibleMat
runApp('Desktop/comparisonMatricesApp/admin')
runApp('Desktop/comparisonMatricesApp/admin')
library(mongolite)
collectionConnection <- function(user, password, ip, port, db, collection){
#generate the ultimate url.
urlPath <- sprintf("mongodb://%s:%s@%s:%s/?authMechanism=SCRAM-SHA-256&authSource=%s",
user,
password,
ip,
port,
db)
#connect to the collection.
collConn <- mongo(db = db,
collection = collection,
url = urlPath,
verbose = TRUE)
#return the connection environment.
return(collConn)
}
#settings para Aministrador
user <-"Administrador"
password <- "comparisonMatrixApp2020"
ip <- "127.0.0.1"
port <- "27017"
db <- "comparisonMatrices"
collection <- "test"
#instancia de conexion
con <- collectionConnection(user, password, ip, port, db, collection)
setwd("~/Desktop/MatrixOfCombinationsApp/admin/STRING")
linksDetailed<-read.delim("9606.protein.links.detailed.v11.0.txt", header = TRUE, sep = "")
#SERA LA TRADUCCION CON PROTEIN INFO
proteinInfo<-read.delim("9606.protein.info.v11.0.txt", header = TRUE, sep = "\t")
#HACER UNICOS LOS GENES
raw_ensp<-unique(linksDetailed$protein1)
raw_ensp_matched<-raw_ensp %in%proteinInfo$protein_external_id
table(raw_ensp_matched)
raw_ensp_not_matched<-raw_ensp[!raw_ensp_matched]
#PARA LOS GENES QUE NO SE ENCUENTREN
#raw_ensp_not_matched
#PREPARAR LOS DATOS PORQUE DESDE STRING VIENEN CON TAXON
cut<-(stringr::str_split(raw_ensp_not_matched,"\\.", simplify = TRUE))
taxon<-cut[1,1]
ensp_not_matched_noTax<-cut[,2]
#SE UTILIZARAN DISTINTOS PAQUETES
#BIOMART
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
ensp_not_matched_noTax_symbol_bmrt <- getBM(filters= "ensembl_peptide_id", attributes= c("ensembl_peptide_id","hgnc_symbol"),values=ensp_not_matched_noTax, mart= mart)
bad_names_bio<-which(ensp_not_matched_noTax_symbol_bmrt$hgnc_symbol %in% "")
ensp_not_matched_noTax_symbol_bmrt_noBad<-ensp_not_matched_noTax_symbol_bmrt[-bad_names_bio,]
#LOS QE NO PASEN BIO MART
ensp_not_matched_noTax_symbol_bmrt_Bad<-ensp_not_matched_noTax_symbol_bmrt[bad_names_bio,]
length(ensp_not_matched_noTax_symbol_bmrt_noBad$ensembl_peptide_id)
ensp_not_matched_noTax_symbol_bmrt$ensembl_peptide_id<-paste0(taxon,".",ensp_not_matched_noTax_symbol_bmrt$ensembl_peptide_id)
colnames(ensp_not_matched_noTax_symbol_bmrt)<-colnames(proteinInfo[,1:2])
library('biomaRt')
linksDetailed<-read.delim("9606.protein.links.detailed.v11.0.txt", header = TRUE, sep = "")
#SERA LA TRADUCCION CON PROTEIN INFO
proteinInfo<-read.delim("9606.protein.info.v11.0.txt", header = TRUE, sep = "\t")
#HACER UNICOS LOS GENES
raw_ensp<-unique(linksDetailed$protein1)
raw_ensp_matched<-raw_ensp %in%proteinInfo$protein_external_id
table(raw_ensp_matched)
raw_ensp_not_matched<-raw_ensp[!raw_ensp_matched]
#PARA LOS GENES QUE NO SE ENCUENTREN
#raw_ensp_not_matched
#PREPARAR LOS DATOS PORQUE DESDE STRING VIENEN CON TAXON
cut<-(stringr::str_split(raw_ensp_not_matched,"\\.", simplify = TRUE))
taxon<-cut[1,1]
ensp_not_matched_noTax<-cut[,2]
#SE UTILIZARAN DISTINTOS PAQUETES
#BIOMART
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
ensp_not_matched_noTax_symbol_bmrt <- getBM(filters= "ensembl_peptide_id", attributes= c("ensembl_peptide_id","hgnc_symbol"),values=ensp_not_matched_noTax, mart= mart)
bad_names_bio<-which(ensp_not_matched_noTax_symbol_bmrt$hgnc_symbol %in% "")
ensp_not_matched_noTax_symbol_bmrt_noBad<-ensp_not_matched_noTax_symbol_bmrt[-bad_names_bio,]
#LOS QE NO PASEN BIO MART
ensp_not_matched_noTax_symbol_bmrt_Bad<-ensp_not_matched_noTax_symbol_bmrt[bad_names_bio,]
length(ensp_not_matched_noTax_symbol_bmrt_noBad$ensembl_peptide_id)
ensp_not_matched_noTax_symbol_bmrt$ensembl_peptide_id<-paste0(taxon,".",ensp_not_matched_noTax_symbol_bmrt$ensembl_peptide_id)
colnames(ensp_not_matched_noTax_symbol_bmrt)<-colnames(proteinInfo[,1:2])
#6514
#ANNOTATION
library(org.Hs.eg.db)
esenblKyes <- keys(org.Hs.eg.db, keytype="ENSEMBLPROT")
transEnsbSymb<-select(org.Hs.eg.db, keys=esenblKyes, columns="SYMBOL", keytype="ENSEMBLPROT")
ensp_not_matched_noTax_anno_pos<-which(ensp_not_matched_noTax %in% transEnsbSymb$ENSEMBLPROT)
ensp_not_matched_noTax_symbol_anno<-transEnsbSymb[ensp_not_matched_noTax_anno_pos,]
bad_names_anno<-which(ensp_not_matched_noTax_symbol_anno$SYMBOL %in% "")
table(bad_names_anno)
#NO HAY GENES MALOS
length(ensp_not_matched_noTax_symbol_anno$SYMBOL)
ensp_not_matched_noTax_symbol_bmrt
ENSPs<-rbind(proteinInfo[,1:2],ensp_not_matched_noTax_symbol_bmrt)
ENSPs
length(ensp_not_matched_noTax_symbol_bmrt$protein_external_id)
length(ENSPs$protein_external_id)
pos_name1<-match(linksDetailed$protein1,ENSPs$protein_external_id)
linksDetailed$protein1<-ENSPs$preferred_name[pos_name1]
#prot2
pos_name2<-match(linksDetailed$protein2,ENSPs$protein_external_id)
linksDetailed$protein2<-ENSPs$preferred_name[pos_name2]
#FALTA REMOVER LOS NA
linksDetailed<-na.omit(linksDetailed)
linksDetailed
collection <- paste0("STRING_",taxon)
collection
shiny::runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
runApp('~/Desktop/MatrixOfCombinationsApp/admin')
